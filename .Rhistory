plot(hats)
hats <- c("butterfly", "union", "hummingbird", "grogu", "texas4000",
"luckyduck", "padre island", "A's", "dad's hat", "floppystraw")
book.shelf <- c(42, 52, 11, 45, 33, 59, 40, 34, 71, 33)
plot(hats)
hats <- c("butterfly", "union", "hummingbird", "grogu", "texas4000",
"luckyduck", "padre island", "A's", "dad's hat", "floppystraw")
book.shelf <- c(42, 52, 11, 45, 33, 59, 40, 34, 71, 33)
plot(hats)
hats <- as.factor(hats)
plot(hats)
1+1
hi
hi <- hello
hi <- "hello"
doors <- c("goat", "goat", "treasure")
nwins <- 0
win.history <- NULL
N_SIMULATIONS <- 10000
nwins <- 0
win.history <- NULL
doors <- c("goat", "goat", "treasure")
for(i in 1:N_SIMULATIONS) {
where.prize <- sample(doors,1) # prize is hidden in a random location
which.choose <- sample(doors,1) # what the contestant chose
# Monty can only open doors that are (i) unchosen, and
# (ii) not where the prize is
can.open <- setdiff(doors, c(where.prize, which.choose))
monty.opens <- sample(can.open,1) # Monty opens a random door that he can
# if we switch:
#which.choose <- sample(setdiff(1:3, c(monty.opens, which.choose)),1)
if(which.choose == where.prize) {
nwins <- nwins+1
}
# Keep track of our win percentage over runs of the algorithm:
win.history <- append(win.history, nwins/i)
#win.history <- c(win_history, nwins/i)
}
doors <- c("goat", "goat", "treasure")
doors
sample(doors,1)
nwins <- 0
win.history <- NULL
doors <- c("goat1", "goat2", "treasure")
for(i in 1:N_SIMULATIONS) {
where.prize <- sample(doors,1) # prize is hidden in a random location
which.choose <- sample(doors,1) # what the contestant chose
# Monty can only open doors that are (i) unchosen, and
# (ii) not where the prize is
can.open <- setdiff(doors, c(where.prize, which.choose))
monty.opens <- sample(can.open,1) # Monty opens a random door that he can
# if we switch:
#which.choose <- sample(setdiff(1:3, c(monty.opens, which.choose)),1)
if(which.choose == where.prize) {
nwins <- nwins+1
}
# Keep track of our win percentage over runs of the algorithm:
win.history <- append(win.history, nwins/i)
#win.history <- c(win_history, nwins/i)
}
print(nwins/N_SIMULATIONS)
N_SIMULATIONS <- 10000
nwins <- 0
win.history <- NULL
doors <- c("goat1", "goat2", "treasure")
for(i in 1:N_SIMULATIONS) {
where.prize <- sample(doors,1) # prize is hidden in a random location
which.choose <- sample(doors,1) # what the contestant chose
# Monty can only open doors that are (i) unchosen, and
# (ii) not where the prize is
can.open <- setdiff(doors, c(where.prize, which.choose))
monty.opens <- sample(can.open,1) # Monty opens a random door that he can
# if we switch:
which.choose <- sample(setdiff(1:3, c(monty.opens, which.choose)),1)
if(which.choose == where.prize) {
nwins <- nwins+1
}
# Keep track of our win percentage over runs of the algorithm:
win.history <- append(win.history, nwins/i)
#win.history <- c(win_history, nwins/i)
}
print(nwins/N_SIMULATIONS)
N_SIMULATIONS <- 10000
nwins <- 0
win.history <- NULL
doors <- c("goat1", "goat2", "treasure")
for(i in 1:N_SIMULATIONS) {
where.prize <- sample(doors,1) # prize is hidden in a random location
which.choose <- sample(doors,1) # what the contestant chose
# Monty can only open doors that are (i) unchosen, and
# (ii) not where the prize is
can.open <- setdiff(doors, c(where.prize, which.choose))
monty.opens <- sample(can.open,1) # Monty opens a random door that he can
# if we switch:
which.choose <- sample(setdiff(1:3, c(monty.opens, which.choose)),1)
if(which.choose == where.prize) {
nwins <- nwins+1
}
# Keep track of our win percentage over runs of the algorithm:
win.history <- append(win.history, nwins/i)
#win.history <- c(win_history, nwins/i)
}
print(nwins/N_SIMULATIONS)
N_SIMULATIONS <- 10000
nwins <- 0
win.history <- NULL
doors <- c("goat1", "goat2", "treasure")
for(i in 1:N_SIMULATIONS) {
where.prize <- sample(doors,1) # prize is hidden in a random location
which.choose <- sample(doors,1) # what the contestant chose
# Monty can only open doors that are (i) unchosen, and
# (ii) not where the prize is
can.open <- setdiff(doors, c(where.prize, which.choose))
monty.opens <- sample(can.open,1) # Monty opens a random door that he can
# if we switch:
which.choose <- sample(setdiff(1:3, c(monty.opens, which.choose)),1)
if(which.choose == where.prize) {
nwins <- nwins+1
}
# Keep track of our win percentage over runs of the algorithm:
win.history <- append(win.history, nwins/i)
#win.history <- c(win_history, nwins/i)
}
print(nwins/N_SIMULATIONS)
nwins <- 0
win.history <- NULL
doors <- c("goat1", "goat2", "treasure")
for(i in 1:N_SIMULATIONS) {
where.prize <- sample(doors,1) # prize is hidden in a random location
which.choose <- sample(doors,1) # what the contestant chose
# Monty can only open doors that are (i) unchosen, and
# (ii) not where the prize is
can.open <- setdiff(doors, c(where.prize, which.choose))
monty.opens <- sample(can.open,1) # Monty opens a random door that he can
# if we switch:
#which.choose <- sample(setdiff(1:3, c(monty.opens, which.choose)),1)
if(which.choose == where.prize) {
nwins <- nwins+1
}
# Keep track of our win percentage over runs of the algorithm:
win.history <- append(win.history, nwins/i)
#win.history <- c(win_history, nwins/i)
}
print(nwins/N_SIMULATIONS)
variable <- c(1,2,3,4,5) # the numbers one through five
variable <- c(1,2,3,4,5) # the numbers one through five
print(variable)
variable
variable <- c(1,2,3,4,5) # the numbers one through five
print(variable)
variable
### WHICH LINE IS BEST FIT???
bucket <- array()
for(i in c(1:10000)){
d <- rnorm(10000, 100, 10)
mean.res <- abs(d) - mean(d)
median.res <- abs(d) - median(d)
bucket[i] <- sum(mean.res) - sum(median.res)
}
hist(bucket)
mean(bucket)
sum(mean.res)
sum(median.res)
### WHICH LINE IS BEST FIT???
bucket <- array()
for(i in c(1:10000)){
d <- rnorm(10000, 100, 10)
mean.res <- abs(d) - mean(d)
median.res <- abs(d) - median(d)
bucket[i] <- sum(mean.res) - sum(median.res)
}
hist(bucket)
mean(bucket)
sum(mean.res)
sum(median.res)
mean(bucket)
### WHICH LINE IS BEST FIT???
bucket <- array()
for(i in c(1:10000)){
d <- rnorm(10000, 100, 10)
mean.res <- abs(d) - mean(d)
median.res <- abs(d) - median(d)
bucket[i] <- sum(mean.res) - sum(median.res)
}
hist(bucket)
mean(bucket)
sum(mean.res)
sum(median.res)
0 - s
## define a random sample : what is the mean of this sample?
s <- sample(0:10, 10, replace = T)
s
## showing the mean minimizes the sum of squared distances.
mean(s)
m <- mean(s)
s - m
(s - m)^2
sum((s - m)^2) # okay! but could another number be smaller than this??
## could we
0 - s
(0 - s)^2
sum((0 - s)^2)
m <- seq(0,10, by = .01)
score <- array()
for(i in 1:length(m)){
score[i] <- sum((m[i] - s)^2)
}
score
plot(score ~ m)
abline(v = mean(s))
laundryhang <- c("shirt", "shirt", "leggings", "leggings", "shirt",
"shirt", "leggings", "pants", "sweater", "sweater")
hist(counting) # a way to graph the variable (a histogram)
plot(laundryhang) # a way to graph the non-numeric variable
laundryhang <- c("shirt", "shirt", "leggings", "leggings", "shirt",
"shirt", "leggings", "pants", "sweater", "sweater") # defining a string variable
print(laundryhang)
laundryhang # another way to "print" the variable
laundryhang <- as.factor(laundryhang) # changing the format of the sting variable into a categorical factor
plot(laundryhang) # a way to graph the non-numeric variable
d <- data.frame(subj   = c(1, 2, 3,  4)
,age   = c(7, 7, 6,  5)
,score = c(3, 8, 10, NA)
)
# simple for loop
for(r in 1:nrow(d)) {
if(r>1) {
print(d[r,])
}
}
d
## define goat, goat, treasure.
options <- c("goat", "goat", "treasure")
## user makes a choice; two choices leftover.
choice <- sample(options, 1)
choice
setdiff(options, choice)
choice <- sample(doors, 1)
choice
ima.keeper <- array()
x <- "KEEPER"
options <- c("goat", "goat", "treasure") # the options
for(i in c(1:10000)){
choice <- sample(options, 1) ## user makes a choice; two choices leftover.
result <- ifelse(x == "SWITCHER",
ifelse(setdiff(options, choice) == "treasure", # if leftover is t then switching wins
"WINNER", "LOSER"),
ifelse(setdiff(options, choice) == "treasure", # if leftover is t then not switching loses.
"LOSER", "WINNER"))
ima.keeper[i] <- result
}
ima.keeper
trials <- array()
sims <- 1000
for(i in c(1:sims)){
## there is a prize behind a door :
treasure <- sample(1:3, 1)
## the person chooses a door :
my.choice <- sample(1:3, 1)
## doors that are leftover for monty to open : not treasure and not my choice.
leftover <- setdiff(1:3, c(treasure, my.choice))
## monty opens a door (not any door, but must satsify two rules - (i) not chosen and (ii) not where prize is)
door.opened <- sample(leftover, 1)
## if we switch, then we can open one other door that is i) not door.opened and ii) not our original choice
switch.options <- setdiff(1:3, c(door.opened, my.choice))
my.choice <- sample(switch.options, 1)
## if we do not switch, then nothing changes.
## THE RESULT : did we win??
trials[i] <- ifelse(my.choice == treasure, 1, 0)
}
sum(trials)/sims
plot(trials/row.names(trials))
doors <- c("door1", "door2", "door3")
## Define player choice
choice <- sample(doors, 1)
treasure <- sample(doors, 1)
## Define what Monty can open.
can.open <- setdiff(doors, c(where.prize, which.choose))
can.open
can.open <- setdiff(doors, c(choice, treasure))
can.open
## Define options
doors <- c("door1", "door2", "door3")
## Define player choice and treasure location.
choice <- sample(doors, 1)
treasure <- sample(doors, 1)
choice
treasure
## Define what Monty can open.
can.open <- setdiff(doors, c(choice, treasure))
can.open
## Define what Monty *does* open.
Monty.open <- sample(can.open, 1) # opens a random door.
if(choice == treasure)
ifelse(choice == treasure, "WIN", "LOSE")
choice
treasure
setdiff(doors, c(monty.open, choice), 1)
setdiff(doors, c(monty.open, choice)), 1)
setdiff(doors, c(monty.open, choice))
## Define what Monty *does* open.
monty.open <- sample(can.open, 1) # opens a random door.
setdiff(doors, c(monty.open, choice))
choice <- sample(setdiff(doors, c(monty.open, choice)), 1)
## Test whether we won or not.
ifelse(choice == treasure, "WIN", "LOSE")
setdiff(doors, c(choice, treasure))
ima.keeper <- array()
x <- "KEEPER"
options <- c("goat", "goat", "treasure") # the options
for(i in c(1:10000)){
choice <- sample(options, 1) ## user makes a choice; two choices leftover.
result <- ifelse(x == "SWITCHER",
ifelse(setdiff(options, choice) == "treasure", # if leftover is t then switching wins
"WINNER", "LOSER"),
ifelse(setdiff(options, choice) == "treasure", # if leftover is t then not switching loses.
"LOSER", "WINNER"))
ima.keeper[i] <- result
}
ima.keeper
sum(ima.keeper)
sum(ima.keeper == "WINNER")
sum(ima.keeper == "WINNER") / length(ima.keeper)
ima.keeper <- array()
x <- "KEEPER"
options <- c("goat", "goat", "treasure") # the options
for(i in c(1:10000)){
choice <- sample(options, 1) ## user makes a choice; two choices leftover.
result <- ifelse(x == "SWITCHER",
ifelse(setdiff(options, choice) == "treasure", # if leftover is t then switching wins
"WINNER", "LOSER"),
ifelse(setdiff(options, choice) == "treasure", # if leftover is t then not switching loses.
"LOSER", "WINNER"))
ima.keeper[i] <- result
}
ima.keeper
sum(ima.keeper == "WINNER") / length(ima.keeper)
####
ima.switcher <- array()
x <- "SWITCHER"
options <- c("goat", "goat", "treasure") # the options
for(i in c(1:10000)){
choice <- sample(options, 1) ## user makes a choice; two choices leftover.
result <- ifelse(x == "SWITCHER",
ifelse(setdiff(options, choice) == "treasure", # if leftover is t then switching wins
"WINNER", "LOSER"),
ifelse(setdiff(options, choice) == "treasure", # if leftover is t then not switching loses.
"LOSER", "WINNER"))
ima.switcher[i] <- result
}
ima.switcher
switcher <- sum(ima.switcher == "WINNER")
keeper <- sum(ima.keeper == "WINNER")
d <- data.frame(switcher,keeper)
d
ima.keeper <- array()
x <- "KEEPER"
options <- c("goat", "goat", "treasure") # the options
for(i in c(1:10000)){
choice <- sample(options, 1) ## user makes a choice; two choices leftover.
result <- ifelse(x == "SWITCHER",
ifelse(setdiff(options, choice) == "treasure", # if leftover is t then switching wins
"WINNER", "LOSER"),
ifelse(setdiff(options, choice) == "treasure", # if leftover is t then not switching loses.
"LOSER", "WINNER"))
ima.keeper[i] <- result
}
ima.keeper
sum(ima.keeper == "WINNER") / length(ima.keeper)
####
ima.switcher <- array()
x <- "SWITCHER"
options <- c("goat", "goat", "treasure") # the options
for(i in c(1:10000)){
choice <- sample(options, 1) ## user makes a choice; two choices leftover.
result <- ifelse(x == "SWITCHER",
ifelse(setdiff(options, choice) == "treasure", # if leftover is t then switching wins
"WINNER", "LOSER"),
ifelse(setdiff(options, choice) == "treasure", # if leftover is t then not switching loses.
"LOSER", "WINNER"))
ima.switcher[i] <- result
}
ima.switcher
switcher <- sum(ima.switcher == "WINNER")
keeper <- sum(ima.keeper == "WINNER")
d <- data.frame(switcher,keeper)
d
ima.keeper <- array()
x <- "KEEPER"
options <- c("goat", "goat", "treasure") # the options
for(i in c(1:10000)){
choice <- sample(options, 1) ## user makes a choice; two choices leftover.
result <- ifelse(x == "SWITCHER",
ifelse(setdiff(options, choice) == "treasure", # if leftover is t then switching wins
"WINNER", "LOSER"),
ifelse(setdiff(options, choice) == "treasure", # if leftover is t then not switching loses.
"LOSER", "WINNER"))
ima.keeper[i] <- result
}
ima.keeper
sum(ima.keeper == "WINNER") / length(ima.keeper)
####
ima.switcher <- array()
x <- "SWITCHER"
options <- c("goat", "goat", "treasure") # the options
for(i in c(1:10000)){
choice <- sample(options, 1) ## user makes a choice; two choices leftover.
result <- ifelse(x == "SWITCHER",
ifelse(setdiff(options, choice) == "treasure", # if leftover is t then switching wins
"WINNER", "LOSER"),
ifelse(setdiff(options, choice) == "treasure", # if leftover is t then not switching loses.
"LOSER", "WINNER"))
ima.switcher[i] <- result
}
ima.switcher
switcher <- sum(ima.switcher == "WINNER")
keeper <- sum(ima.keeper == "WINNER")
d <- data.frame(switcher,keeper)
d
ima.keeper <- array()
x <- "KEEPER"
options <- c("goat", "goat", "treasure") # the options
for(i in c(1:10000)){
choice <- sample(options, 1) ## user makes a choice; two choices leftover.
result <- ifelse(x == "SWITCHER",
ifelse(setdiff(options, choice) == "treasure", # if leftover is t then switching wins
"WINNER", "LOSER"),
ifelse(setdiff(options, choice) == "treasure", # if leftover is t then not switching loses.
"LOSER", "WINNER"))
ima.keeper[i] <- result
}
ima.keeper
sum(ima.keeper == "WINNER") / length(ima.keeper)
####
ima.switcher <- array()
x <- "SWITCHER"
options <- c("goat", "goat", "treasure") # the options
for(i in c(1:10000)){
choice <- sample(options, 1) ## user makes a choice; two choices leftover.
result <- ifelse(x == "SWITCHER",
ifelse(setdiff(options, choice) == "treasure", # if leftover is t then switching wins
"WINNER", "LOSER"),
ifelse(setdiff(options, choice) == "treasure", # if leftover is t then not switching loses.
"LOSER", "WINNER"))
ima.switcher[i] <- result
}
ima.switcher
switcher <- sum(ima.switcher == "WINNER")
keeper <- sum(ima.keeper == "WINNER")
d <- data.frame(switcher,keeper)
d
ifelse(choice == treasure, "WIN", "LOSE")
## Define options
### HINT : Create a string variable with three options : door1, door2, and door3
doors <- c("door1", "door2", "door3")
## Define player choice and treasure location.
### HINT : use the sample() function to define two variables named choice and treasure; each a random door.
choice <- sample(doors, 1)
treasure <- sample(doors, 1)
## Define what doors Monty can open.
### HINT : use the setdiff() function to identify all the doors that are not what the player chose or where the treasure is.
can.open <- setdiff(doors, c(choice, treasure))
## Define what doors Monty can open.
### HINT : use the setdiff() function to identify all the doors that are not what the player chose or where the treasure is.
can.open <- setdiff(doors, c(choice, treasure))
can.open
choice
treasure
can.open
## Define what Monty *does* open.
### HINT : use the sample function to select one random door from the variable that defines what doors Monty can open.
monty.open <- sample(can.open, 1) # opens a random door.
monty.open
## Define what Monty *does* open.
### HINT : use the sample function to select one random door from the variable that defines what doors Monty can open.
monty.open <- sample(can.open, 1) # opens a random door.
monty.open
chickwts$weight
## Troubleshooting errors
chickwts$weight-mean(chickwts$weight)
haas <- read.csv("./chapter_data/hormone_data.csv", stringsAsFactors = T)
head(haas)
#| label: preload data
haas <- read.csv("./chapter_data/hormone_data.csv", stringsAsFactors = T)
haas$NPI
plot(haas$sex, col = 'black', bor = 'white')
haas
hist(haas$test,
xlab = "Testosterone Level", main = "",
col = 'black', bor = 'white')
#| label: preload data
haas <- read.csv("./chapter_data/hormone_data.csv", stringsAsFactors = T)
haas$NPI
hist(haas$NPI, xlab = "Narcissism Score", col = 'black', bor = 'white', main = "")
hist(haas$test,
xlab = "Testosterone Level", main = "",
col = 'black', bor = 'white')
plot(haas$sex, col = 'black', bor = 'white', xlab = "Sex")
1:100
haas
haas[2,3]
haas[2,]
haas[4:10, c(1,3)]
haas$test
haas$test[2]
haas$test[1:3]
haas$test[c(2,3,14:18, 116:118)]
#| include: false
data <- data.frame(StudentID = c(1:5),
favDrink = c("boba", "boba", "boba", "coffee", "water"),
age = c(20, 19, 54, 22, 38))
data
