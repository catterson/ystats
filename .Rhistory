trials <- array()
sims <- 1000
for(i in c(1:sims)){
## there is a prize behind a door :
treasure <- sample(1:3, 1)
## the person chooses a door :
my.choice <- sample(1:3, 1)
## doors that are leftover for monty to open : not treasure and not my choice.
leftover <- setdiff(1:3, c(treasure, my.choice))
## monty opens a door (not any door, but must satsify two rules - (i) not chosen and (ii) not where prize is)
door.opened <- sample(leftover, 1)
## if we switch, then we can open one other door that is i) not door.opened and ii) not our original choice
switch.options <- setdiff(1:3, c(door.opened, my.choice))
my.choice <- sample(switch.options, 1)
## if we do not switch, then nothing changes.
## THE RESULT : did we win??
trials[i] <- ifelse(my.choice == treasure, 1, 0)
}
sum(trials)/sims
plot(trials/row.names(trials))
doors <- c("door1", "door2", "door3")
## Define player choice
choice <- sample(doors, 1)
treasure <- sample(doors, 1)
## Define what Monty can open.
can.open <- setdiff(doors, c(where.prize, which.choose))
can.open
can.open <- setdiff(doors, c(choice, treasure))
can.open
## Define options
doors <- c("door1", "door2", "door3")
## Define player choice and treasure location.
choice <- sample(doors, 1)
treasure <- sample(doors, 1)
choice
treasure
## Define what Monty can open.
can.open <- setdiff(doors, c(choice, treasure))
can.open
## Define what Monty *does* open.
Monty.open <- sample(can.open, 1) # opens a random door.
if(choice == treasure)
ifelse(choice == treasure, "WIN", "LOSE")
choice
treasure
setdiff(doors, c(monty.open, choice), 1)
setdiff(doors, c(monty.open, choice)), 1)
setdiff(doors, c(monty.open, choice))
## Define what Monty *does* open.
monty.open <- sample(can.open, 1) # opens a random door.
setdiff(doors, c(monty.open, choice))
choice <- sample(setdiff(doors, c(monty.open, choice)), 1)
## Test whether we won or not.
ifelse(choice == treasure, "WIN", "LOSE")
setdiff(doors, c(choice, treasure))
ima.keeper <- array()
x <- "KEEPER"
options <- c("goat", "goat", "treasure") # the options
for(i in c(1:10000)){
choice <- sample(options, 1) ## user makes a choice; two choices leftover.
result <- ifelse(x == "SWITCHER",
ifelse(setdiff(options, choice) == "treasure", # if leftover is t then switching wins
"WINNER", "LOSER"),
ifelse(setdiff(options, choice) == "treasure", # if leftover is t then not switching loses.
"LOSER", "WINNER"))
ima.keeper[i] <- result
}
ima.keeper
sum(ima.keeper)
sum(ima.keeper == "WINNER")
sum(ima.keeper == "WINNER") / length(ima.keeper)
ima.keeper <- array()
x <- "KEEPER"
options <- c("goat", "goat", "treasure") # the options
for(i in c(1:10000)){
choice <- sample(options, 1) ## user makes a choice; two choices leftover.
result <- ifelse(x == "SWITCHER",
ifelse(setdiff(options, choice) == "treasure", # if leftover is t then switching wins
"WINNER", "LOSER"),
ifelse(setdiff(options, choice) == "treasure", # if leftover is t then not switching loses.
"LOSER", "WINNER"))
ima.keeper[i] <- result
}
ima.keeper
sum(ima.keeper == "WINNER") / length(ima.keeper)
####
ima.switcher <- array()
x <- "SWITCHER"
options <- c("goat", "goat", "treasure") # the options
for(i in c(1:10000)){
choice <- sample(options, 1) ## user makes a choice; two choices leftover.
result <- ifelse(x == "SWITCHER",
ifelse(setdiff(options, choice) == "treasure", # if leftover is t then switching wins
"WINNER", "LOSER"),
ifelse(setdiff(options, choice) == "treasure", # if leftover is t then not switching loses.
"LOSER", "WINNER"))
ima.switcher[i] <- result
}
ima.switcher
switcher <- sum(ima.switcher == "WINNER")
keeper <- sum(ima.keeper == "WINNER")
d <- data.frame(switcher,keeper)
d
ima.keeper <- array()
x <- "KEEPER"
options <- c("goat", "goat", "treasure") # the options
for(i in c(1:10000)){
choice <- sample(options, 1) ## user makes a choice; two choices leftover.
result <- ifelse(x == "SWITCHER",
ifelse(setdiff(options, choice) == "treasure", # if leftover is t then switching wins
"WINNER", "LOSER"),
ifelse(setdiff(options, choice) == "treasure", # if leftover is t then not switching loses.
"LOSER", "WINNER"))
ima.keeper[i] <- result
}
ima.keeper
sum(ima.keeper == "WINNER") / length(ima.keeper)
####
ima.switcher <- array()
x <- "SWITCHER"
options <- c("goat", "goat", "treasure") # the options
for(i in c(1:10000)){
choice <- sample(options, 1) ## user makes a choice; two choices leftover.
result <- ifelse(x == "SWITCHER",
ifelse(setdiff(options, choice) == "treasure", # if leftover is t then switching wins
"WINNER", "LOSER"),
ifelse(setdiff(options, choice) == "treasure", # if leftover is t then not switching loses.
"LOSER", "WINNER"))
ima.switcher[i] <- result
}
ima.switcher
switcher <- sum(ima.switcher == "WINNER")
keeper <- sum(ima.keeper == "WINNER")
d <- data.frame(switcher,keeper)
d
ima.keeper <- array()
x <- "KEEPER"
options <- c("goat", "goat", "treasure") # the options
for(i in c(1:10000)){
choice <- sample(options, 1) ## user makes a choice; two choices leftover.
result <- ifelse(x == "SWITCHER",
ifelse(setdiff(options, choice) == "treasure", # if leftover is t then switching wins
"WINNER", "LOSER"),
ifelse(setdiff(options, choice) == "treasure", # if leftover is t then not switching loses.
"LOSER", "WINNER"))
ima.keeper[i] <- result
}
ima.keeper
sum(ima.keeper == "WINNER") / length(ima.keeper)
####
ima.switcher <- array()
x <- "SWITCHER"
options <- c("goat", "goat", "treasure") # the options
for(i in c(1:10000)){
choice <- sample(options, 1) ## user makes a choice; two choices leftover.
result <- ifelse(x == "SWITCHER",
ifelse(setdiff(options, choice) == "treasure", # if leftover is t then switching wins
"WINNER", "LOSER"),
ifelse(setdiff(options, choice) == "treasure", # if leftover is t then not switching loses.
"LOSER", "WINNER"))
ima.switcher[i] <- result
}
ima.switcher
switcher <- sum(ima.switcher == "WINNER")
keeper <- sum(ima.keeper == "WINNER")
d <- data.frame(switcher,keeper)
d
ima.keeper <- array()
x <- "KEEPER"
options <- c("goat", "goat", "treasure") # the options
for(i in c(1:10000)){
choice <- sample(options, 1) ## user makes a choice; two choices leftover.
result <- ifelse(x == "SWITCHER",
ifelse(setdiff(options, choice) == "treasure", # if leftover is t then switching wins
"WINNER", "LOSER"),
ifelse(setdiff(options, choice) == "treasure", # if leftover is t then not switching loses.
"LOSER", "WINNER"))
ima.keeper[i] <- result
}
ima.keeper
sum(ima.keeper == "WINNER") / length(ima.keeper)
####
ima.switcher <- array()
x <- "SWITCHER"
options <- c("goat", "goat", "treasure") # the options
for(i in c(1:10000)){
choice <- sample(options, 1) ## user makes a choice; two choices leftover.
result <- ifelse(x == "SWITCHER",
ifelse(setdiff(options, choice) == "treasure", # if leftover is t then switching wins
"WINNER", "LOSER"),
ifelse(setdiff(options, choice) == "treasure", # if leftover is t then not switching loses.
"LOSER", "WINNER"))
ima.switcher[i] <- result
}
ima.switcher
switcher <- sum(ima.switcher == "WINNER")
keeper <- sum(ima.keeper == "WINNER")
d <- data.frame(switcher,keeper)
d
ifelse(choice == treasure, "WIN", "LOSE")
## Define options
### HINT : Create a string variable with three options : door1, door2, and door3
doors <- c("door1", "door2", "door3")
## Define player choice and treasure location.
### HINT : use the sample() function to define two variables named choice and treasure; each a random door.
choice <- sample(doors, 1)
treasure <- sample(doors, 1)
## Define what doors Monty can open.
### HINT : use the setdiff() function to identify all the doors that are not what the player chose or where the treasure is.
can.open <- setdiff(doors, c(choice, treasure))
## Define what doors Monty can open.
### HINT : use the setdiff() function to identify all the doors that are not what the player chose or where the treasure is.
can.open <- setdiff(doors, c(choice, treasure))
can.open
choice
treasure
can.open
## Define what Monty *does* open.
### HINT : use the sample function to select one random door from the variable that defines what doors Monty can open.
monty.open <- sample(can.open, 1) # opens a random door.
monty.open
## Define what Monty *does* open.
### HINT : use the sample function to select one random door from the variable that defines what doors Monty can open.
monty.open <- sample(can.open, 1) # opens a random door.
monty.open
chickwts$weight
## Troubleshooting errors
chickwts$weight-mean(chickwts$weight)
haas <- read.csv("./chapter_data/hormone_data.csv", stringsAsFactors = T)
head(haas)
#| label: preload data
haas <- read.csv("./chapter_data/hormone_data.csv", stringsAsFactors = T)
haas$NPI
plot(haas$sex, col = 'black', bor = 'white')
haas
hist(haas$test,
xlab = "Testosterone Level", main = "",
col = 'black', bor = 'white')
#| label: preload data
haas <- read.csv("./chapter_data/hormone_data.csv", stringsAsFactors = T)
haas$NPI
hist(haas$NPI, xlab = "Narcissism Score", col = 'black', bor = 'white', main = "")
hist(haas$test,
xlab = "Testosterone Level", main = "",
col = 'black', bor = 'white')
plot(haas$sex, col = 'black', bor = 'white', xlab = "Sex")
1:100
haas
haas[2,3]
haas[2,]
haas[4:10, c(1,3)]
haas$test
haas$test[2]
haas$test[1:3]
haas$test[c(2,3,14:18, 116:118)]
#| include: false
data <- data.frame(StudentID = c(1:5),
favDrink = c("boba", "boba", "boba", "coffee", "water"),
age = c(20, 19, 54, 22, 38))
data
sleep
anxiety
head(sleep)
nrow(sleep)
nroow(sleep)
nrow(sleep)
twitter <- read.csv("~/Downloads/twitter_emotion_data.csv", stringsAsFactors=TRUE)
View(twitter)
twitter <- read.csv("~/Downloads/twitter_emotion_data.csv", stringsAsFactors=TRUE)
nrow()
nrow(twitter)
read.csv()
read.csv(sleep)
grad <- read.csv("~/Downloads/grad_onboard_SP25.csv", stringsAsFactors=TRUE)
View(grad)
selfes <- read.csv("~/Dropbox/Teaching Datasets/selfesteemdata.csv", stringsAsFactors = T, na.strings = "")
selfes <- read.csv("~/Dropbox/Teaching Datasets/selfesteemdata.csv", stringsAsFactors = T, na.strings = "")
selfes <- read.csv("~/Dropbox/Teaching Datasets/selfesteemdata.csv", stringsAsFactors = T, na.strings = "")
selfes <- read.csv("~/Dropbox/Teaching Datasets/selfesteemdata.csv", stringsAsFactors = T)
selfes <- read.csv("~/Dropbox/Teaching Datasets/selfesteemdata.csv")
read.csv("~/Dropbox/Teaching Datasets/selfesteemdata.csv")
d <- read.csv("../datasets/Self-Esteem Dataset/data.csv", stringsAsFactors = T, na.strings = "")
head(d)
d <- read.csv("../datasets/Self-Esteem Dataset/data.csv", stringsAsFactors = T, na.strings = "", sep = \t)
d <- read.csv("../datasets/Self-Esteem Dataset/data.csv", stringsAsFactors = T, na.strings = "", sep = "\t")
head(d)
d <- read.csv("../datasets/Self-Esteem Dataset/data.csv", stringsAsFactors = T, na.strings = "0", sep = "\t")
head(d)
d$Q1
summary(d$Q1)
summary(as.factor(d$Q1))
summary(as.factor(d$Q1))
names(d)
data.frame(d[,1:10])
d[,c(3,5,8:10]
d[,c(3,5,8:10)]
d[,4-c(3,5,8:10)]
4-d[,c(3,5,8:10)]
data.frame(d[,c(1:2,4,6,7)], 4-d[,c(3,5,8:10)])
SELFES.df <- data.frame(d[,c(1:2,4,6,7)], 4-d[,c(3,5,8:10)])
library(psych)
library(psych)
install.packages("psych")
library(psych)
alpha(SELFES.df)
d$SELFES <- rowMeans(SELFES.df, na.rm = T)
hist(d$SELFES, col = 'black', bor = 'white', main = "Histogram of Self-Esteem", xlab = "Self-Esteem Score")
summary(as.factor(d$Q1))
summary(as.factor(d$Q2))
summary(as.factor(d$Q4))
summary(SELFES.df)
SELFES.df <- data.frame(d[,c(1:2,4,6,7)], 5-d[,c(3,5,8:10)])
summary(SELFES.df)
library(psych)
alpha(SELFES.df)
d$SELFES <- rowMeans(SELFES.df, na.rm = T)
hist(d$SELFES, col = 'black', bor = 'white', main = "Histogram of Self-Esteem", xlab = "Self-Esteem Score")
hist(d$SELFES, col = 'black', bor = 'white', main = "Histogram of Self-Esteem", xlab = "Self-Esteem Score", breaks = 10)
hist(d$SELFES, col = 'black', bor = 'white', main = "Histogram of Self-Esteem", xlab = "Self-Esteem Score", breaks = 20)
hist(d$SELFES, col = 'black', bor = 'white', main = "Histogram of Self-Esteem", xlab = "Self-Esteem Score", breaks = 30)
hist(d$SELFES, col = 'black', bor = 'white', main = "Histogram of Self-Esteem", xlab = "Self-Esteem Score", breaks = 40)
hist(d$SELFES, col = 'black', bor = 'white', main = "Histogram of Self-Esteem", xlab = "Self-Esteem Score", breaks = 30)
hist(d$SELFES, col = 'black', bor = 'white', main = "Histogram of Self-Esteem", xlab = "Self-Esteem Score", breaks = c(1:5))
hist(d$SELFES, col = 'black', bor = 'white', main = "Histogram of Self-Esteem", xlab = "Self-Esteem Score", breaks = c(1:4))
hist(d$SELFES, col = 'black', bor = 'white', main = "Histogram of Self-Esteem", xlab = "Self-Esteem Score", breaks = 20)
hist(d$SELFES, col = 'black', bor = 'white', main = "Histogram of Self-Esteem", xlab = "Self-Esteem Score", breaks = 30)
covid <- read.csv("../datasets/covid-data/covid_behavior_data.csv",
stringsAsFactors = T, na.strings = "")
head(covid) # testing to see that this worked
nrow(covid) # the sample size
names(covid) # the names of the variables
hist(covid$Handwash, col = 'black', bor = 'white',
main = "Handwashing Behavior", xlab = "")
covid <- read.csv("../datasets/covid-data/covid_behavior_data.csv",
stringsAsFactors = T, na.strings = "")
head(covid) # testing to see that this worked
nrow(covid) # the sample size
names(covid) # the names of the variables
covid$Handwash
covid <- read.csv("../datasets/covid-data/covid_behavior_data.csv",
stringsAsFactors = T)
hist(covid$Handwash, col = 'black', bor = 'white',
main = "Handwashing Behavior", xlab = "")
hist(covid$Mask, col = 'black', bor = 'white',
main = "Masking Behavior", xlab = "Frequency (0 = Did Not Do)\n(4 = Very often or Always Do")
par(mfrow = c(1,2)) # splitting my graphics window
hist(covid$Handwash, col = 'black', bor = 'white',
main = "Handwashing Behavior",
xlab = "Frequency (0 = Did Not Do)\n(4 = Very often or Always Do")
hist(covid$Mask, col = 'black', bor = 'white',
main = "Masking Behavior",
xlab = "Frequency (0 = Did Not Do)\n(4 = Very often or Always Do")
hist(covid$Mask, col = 'black', bor = 'white',
main = "Masking Behavior",
xlab = "Frequency\n(0 = Did Not Do)\n(4 = Very often or Always Do)")
par(mfrow = c(1,2)) # splitting my graphics window
hist(covid$Handwash, col = 'black', bor = 'white',
main = "Handwashing Behavior",
xlab = "Frequency\n(0 = Did Not Do; 4 = Very Often or Always Do)")
hist(covid$Mask, col = 'black', bor = 'white',
main = "Masking Behavior",
xlab = "Frequency\n(0 = Did Not Do; 4 = Very Often or Always Do)")
par(mfrow = c(1,2)) # splitting my graphics window
hist(covid$Handwash, col = 'black', bor = 'white',
main = "Handwashing Behavior (Self-Reported)",
xlab = "(0 = Did Not Do; 4 = Very Often or Always Do)")
hist(covid$Mask, col = 'black', bor = 'white',
main = "Masking Behavior (Self-Reported)",
xlab = "(0 = Did Not Do; 4 = Very Often or Always Do)")
par(mfrow = c(1,2)) # splitting my graphics window
hist(covid$Handwash, col = 'black', bor = 'white',
main = "Handwashing Behavior (Self-Reported)",
xlab = "0 = Did Not Do\n4 = Very Often or Always Do")
hist(covid$Mask, col = 'black', bor = 'white',
main = "Masking Behavior (Self-Reported)",
xlab = "0 = Did Not Do\n4 = Very Often or Always Do)
par(mfrow = c(1,2)) # splitting my graphics window
hist(covid$Handwash, col = 'black', bor = 'white',
main = "Handwashing Behavior (Self-Reported)",
xlab = "0 = Did Not Do\n4 = Very Often or Always Do")
hist(covid$Mask, col = 'black', bor = 'white',
main = "Masking Behavior (Self-Reported)",
xlab = "0 = Did Not Do\n4 = Very Often or Always Do)
par(mfrow = c(1,2)) # splitting my graphics window
hist(covid$Handwash, col = 'black', bor = 'white',
main = "Handwashing Behavior (Self-Reported)",
t(covid$Handwash, col = 'black', bor = 'white',
main = "Handwashing Behavior (Self-Reported)",
xlab = "0 = Did Not Do\n4 = Very Often or Always Do")
hist(covid$Handwash, col = 'black', bor = 'white',
main = "Handwashing Behavior (Self-Reported)",
xlab = "0 = Did Not Do\n4 = Very Often or Always Do")
hist(covid$Mask, col = 'black', bor = 'white',
main = "Masking Behavior (Self-Reported)",
xlab = "0 = Did Not Do\n4 = Very Often or Always Do")
par(mfrow = c(1,2)) # splitting my graphics window
hist(covid$Handwash, col = 'black', bor = 'white',
main = "Handwashing Behavior (Self-Reported)",
xlab = "0 = Did Not Do\n4 = Very Often or Always Do")
hist(covid$Mask, col = 'black', bor = 'white',
main = "Masking Behavior (Self-Reported)",
xlab = "0 = Did Not Do\n4 = Very Often or Always Do")
plot(covid$gender, col = 'black')
par(mfrow = c(1,3))
plot(covid$gender, col = 'black', xlab = "Gender")
plot(covid$ethnicity, col = 'black', xlab = "Ethnicity")
plot(covid$political_party, col = 'black', xlab = "Political Orientation")
par(mfrow = c(1,3))
plot(covid$gender, col = 'black', xlab = "Gender")
plot(covid$ethnicity, col = 'black', xlab = "Ethnicity")
plot(covid$political_party, col = 'black', xlab = "Political Orientation")
summary(data.frame(covid$gender,
covid$ethnicity,
covid$political_party))
# Chunk 1
#| include: false
d <- read.csv("../datasets/Self-Esteem Dataset/data.csv", stringsAsFactors = T, na.strings = "0", sep = "\t")
d <- read.csv("../datasets/Self-Esteem Dataset/data.csv", stringsAsFactors = T, na.strings = "0", sep = "\t")
d <- read.csv("./datasets/Self-Esteem Dataset/data.csv", stringsAsFactors = T, na.strings = "0", sep = "\t")
SELFES.df <- data.frame(d[,c(1:2,4,6,7)], 5-d[,c(3,5,8:10)])
d$SELFES <- rowMeans(SELFES.df, na.rm = T)
hist(d$SELFES, col = 'black', bor = 'white',
main = "Histogram of Self-Esteem",
xlab = "Self-Esteem Score", breaks = 30)
hist(d$SELFES, col = 'black', bor = 'white',
main = "Histogram of Self-Esteem",
xlab = "Self-Esteem Score", breaks = 10)
hist(d$SELFES, col = 'black', bor = 'white',
main = "Histogram of Self-Esteem",
xlab = "Self-Esteem Score", breaks = 15)
mean(d$SELFES)
mean(d$SELFES, na.rm = T)
unlink("chapters/3R_Description_cache", recursive = TRUE)
# Chunk 1
#| include: false
d <- read.csv("./datasets/Self-Esteem Dataset/data.csv", stringsAsFactors = T, na.strings = "0", sep = "\t")
SELFES.df <- data.frame(d[,c(1:2,4,6,7)], 5-d[,c(3,5,8:10)])
d$SELFES <- rowMeans(SELFES.df, na.rm = T)
# Chunk 2
hist(d$SELFES, col = 'black', bor = 'white',
main = "Histogram of Self-Esteem",
xlab = "Self-Esteem Score", breaks = 15)
#| include: false
d <- read.csv("./datasets/Self-Esteem Dataset/data.csv", stringsAsFactors = T, na.strings = "0", sep = "\t")
SELFES.df <- data.frame(d[,c(1:2,4,6,7)], 5-d[,c(3,5,8:10)])
d$SELFES <- rowMeans(SELFES.df, na.rm = T)
#| include: false
d <- read.csv("./datasets/Self-Esteem Dataset/data.csv", stringsAsFactors = T, na.strings = "0", sep = "\t")
SELFES.df <- data.frame(d[,c(1:2,4,6,7)], 5-d[,c(3,5,8:10)])
d$SELFES <- rowMeans(SELFES.df, na.rm = T)
# Chunk 1
#| include: false
d <- read.csv("./datasets/Self-Esteem Dataset/data.csv", stringsAsFactors = T, na.strings = "0", sep = "\t")
SELFES.df <- data.frame(d[,c(1:2,4,6,7)], 5-d[,c(3,5,8:10)])
d$SELFES <- rowMeans(SELFES.df, na.rm = T)
# Chunk 2
hist(d$SELFES, col = 'black', bor = 'white',
main = "Histogram of Self-Esteem",
xlab = "Self-Esteem Score", breaks = 15)
#| include: false
d <- read.csv("../datasets/Self-Esteem Dataset/data.csv", stringsAsFactors = T, na.strings = "0", sep = "\t")
head(d)
names(d)
summary(as.factor(d$Q4))
SELFES.df <- data.frame(d[,c(1:2,4,6,7)], 5-d[,c(3,5,8:10)])
summary(SELFES.df)
library(psych)
alpha(SELFES.df)
d$SELFES <- rowMeans(SELFES.df, na.rm = T)
hist(d$SELFES, col = 'black', bor = 'white',
main = "Histogram of Self-Esteem",
xlab = "Self-Esteem Score", breaks = 15)
cal <- read.csv("~/Dropbox/!WHY STATS/Class Datasets/cal_mini_SP25.csv")
head(cal)
cal <- read.csv("~/Dropbox/!WHY STATS/Class Datasets/cal_mini_SP25.csv", stringsAsFactors = T)
plot(cal$drink)
plot(cal$stoned72)
cal <- read.csv("~/Dropbox/!WHY STATS/Class Datasets/cal_mini_SP25.csv", stringsAsFactors = T, na.strings = "")
plot(cal$stoned72)
plot(happy ~ stoned72, data = cal)
lm(happy ~ stoned72, data = cal)
summary(lm(happy ~ stoned72, data = cal))
summary(lm(bored ~ stoned72, data = cal))
summary(lm(bored ~ drink, data = cal))
plot(cal$drink)
summary(lm(happy ~ drink, data = cal))
names(cal)
summary(lm(pace ~ drink, data = cal))
summary(lm(pace ~ stoned72, data = cal))
summary(lm(engaged ~ stoned72, data = cal))
summary(lm(engaging ~ stoned72, data = cal))
hist(cal$pace)
hist(cal$engaging)
hist(as.factor(cal$engaging))
plot(as.factor(cal$engaging))
plot(as.factor(cal$pace))
hist(cal$height)
ec <- read.csv("../datasets/ec_data.csv") # Note: make sure to change the *path* in the `read.csv()` function to point R to the correct spot to import the ec dataset from YOUR computer.
#| column: margin
library(psych) # make sure you install.packages("psych") first!
alpha(extra.df)
ec <- read.csv("../datasets/ec_data.csv") # Note: make sure to change the *path* in the `read.csv()` function to point R to the correct spot to import the ec dataset from YOUR computer.
extra.df <- data.frame(ec$e1, ec$e2, ec$e3, # the three positively keyed items
ec$e4r, ec$e5r, ec$e6r) # the three negatively keyed items
head(extra.df) # this code checks my work and make sure my newly created dataframe in fact contain the positively and negatively keyed items
extra.df <- data.frame(ec$e1, ec$e2, ec$e3, # the three positively keyed items
6-ec$e4r, 6-ec$e5r, 6-ec$e6r) # the three negatively keyed items
head(extra.df) # this code checks my work and make sure my newly created dataframe in fact contain the positively and negatively keyed items. Note that there seems to be more consistency in the scores for each individual - people who are low in e1-e3 are now also low in e4r - e6r.
#| column: margin
library(psych) # make sure you install.packages("psych") first!
alpha(extra.df)
library(tidyverse)
